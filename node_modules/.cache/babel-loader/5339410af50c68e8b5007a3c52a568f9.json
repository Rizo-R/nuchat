{"ast":null,"code":"import _slicedToArray from\"/Users/rizo/Documents/Projects/unichat-course/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useState,useEffect}from'react';import{useHistory}from'react-router-dom';import{auth}from'../firebase';var AuthContext=React.createContext();export var useAuth=function useAuth(){return useContext(AuthContext);};export var AuthProvider=function AuthProvider(_ref){var children=_ref.children;var _useState=useState(true),_useState2=_slicedToArray(_useState,2),loading=_useState2[0],setLoading=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),user=_useState4[0],setUser=_useState4[1];var history=useHistory();// Whenever things in the array change, the callback function is called\nuseEffect(function(){auth.onAuthStateChanged(function(user){setUser(user);setLoading(false);// Only navigate to chat if have user\nif(user)history.push('/chats');});},[user,history]);var value={user:user};return/*#__PURE__*/React.createElement(AuthContext.Provider,{value:value},!loading&&children);};","map":{"version":3,"sources":["/Users/rizo/Documents/Projects/unichat-course/src/contexts/AuthContext.js"],"names":["React","useContext","useState","useEffect","useHistory","auth","AuthContext","createContext","useAuth","AuthProvider","children","loading","setLoading","user","setUser","history","onAuthStateChanged","push","value"],"mappings":"oKAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,CAA4BC,QAA5B,CAAsCC,SAAtC,KAAuD,OAAvD,CACA,OAASC,UAAT,KAA2B,kBAA3B,CACA,OAASC,IAAT,KAAqB,aAArB,CAEA,GAAMC,CAAAA,WAAW,CAAGN,KAAK,CAACO,aAAN,EAApB,CAEA,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,SAAMP,CAAAA,UAAU,CAACK,WAAD,CAAhB,EAAhB,CAEP,MAAO,IAAMG,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,CAC1C,cAA8BR,QAAQ,CAAC,IAAD,CAAtC,wCAAOS,OAAP,eAAgBC,UAAhB,eACA,eAAwBV,QAAQ,CAAC,IAAD,CAAhC,yCAAOW,IAAP,eAAaC,OAAb,eACA,GAAMC,CAAAA,OAAO,CAAGX,UAAU,EAA1B,CAEA;AACAD,SAAS,CAAC,UAAM,CACZE,IAAI,CAACW,kBAAL,CAAwB,SAACH,IAAD,CAAU,CAC9BC,OAAO,CAACD,IAAD,CAAP,CACAD,UAAU,CAAC,KAAD,CAAV,CACA;AACA,GAAIC,IAAJ,CAAUE,OAAO,CAACE,IAAR,CAAa,QAAb,EACb,CALD,EAMH,CAPQ,CAON,CAACJ,IAAD,CAAOE,OAAP,CAPM,CAAT,CASA,GAAMG,CAAAA,KAAK,CAAG,CAAEL,IAAI,CAAJA,IAAF,CAAd,CAEA,mBACI,oBAAC,WAAD,CAAa,QAAb,EAAsB,KAAK,CAAEK,KAA7B,EACK,CAACP,OAAD,EAAYD,QADjB,CADJ,CAKH,CAtBM","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { auth } from '../firebase';\n\nconst AuthContext = React.createContext();\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n    const [loading, setLoading] = useState(true);\n    const [user, setUser] = useState(null);\n    const history = useHistory();\n\n    // Whenever things in the array change, the callback function is called\n    useEffect(() => {\n        auth.onAuthStateChanged((user) => {\n            setUser(user);\n            setLoading(false);\n            // Only navigate to chat if have user\n            if (user) history.push('/chats');\n        })\n    }, [user, history]);\n\n    const value = { user };\n\n    return (\n        <AuthContext.Provider value={value}>\n            {!loading && children}\n        </AuthContext.Provider>\n    );\n}"]},"metadata":{},"sourceType":"module"}